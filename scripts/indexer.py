import requests
import pandas as pd
import numpy as np
from requests.auth import HTTPBasicAuth 

BASE = "http://127.0.0.1:9200/"
response = requests.get(BASE + "hotelindexer", auth=HTTPBasicAuth('user', 'pass'))

import requests
from pprint import pprint 
uname = 'elastic'
ELASTIC_PASSWORD = "7ysm8X2-_DU1fiAwpkSh"

# response = requests.get('http://localhost:9200', auth = HTTPBasicAuth(uname, ELASTIC_PASSWORD))






# SSL client authentication using client_cert and client_key

from ssl import create_default_context
from elasticsearch import Elasticsearch

context = create_default_context(cafile=r"C:\Users\huzyfa\Desktop\elasticsearch-8.1.0\config\certs\http_ca.crt")
es = Elasticsearch(
    ['localhost', 'otherhost'],
    http_auth=('user', 'secret'),
    # scheme="https",
    # port=443,
    ssl_context=context,
)

pprint(response.content)
###############################################################################################################

from elasticsearch import Elasticsearch
from elasticsearch.helpers import bulk
# Password for the 'elastic' user generated by Elasticsearch

# Create the client instance
es = Elasticsearch(
    "https://localhost:9200",
    ca_certs=r"C:\Users\huzyfa\Desktop\elasticsearch-8.1.0\config\certs\http_ca.crt",
    basic_auth=("elastic", ELASTIC_PASSWORD))

###############################################################################################################


# reading the hotels dataframe
df = pd.read_csv(r"../csv-files/just_hotels_catg.csv", index_col="name")

# the assignment didn't specify any aggregation kind, but i will use this one , i will use this in the indexer
# generator function for the dataset
gendata = [{nam: [(row).to_dict() for _, row in df.loc[[nam]].replace({np.nan: "null"}).T.items()]} for nam in df.index.unique()]



# i made number_of_replicas=0 due to my pc limitation
mapping = {'properties': 
                  {'hotel_name': {'properties':
                                      {'address': {'type': 'text', 
                                                   'fields': {'keyword': {'type': 'keyword', 'ignore_above': 256}}}, 
                                       'categories': {'type': 'text', 
                                                      'fields': {'keyword': {'type': 'keyword', 'ignore_above': 256}}},                                                                 
                                       'city': {'type': 'text', 
                                                'fields': {'keyword': {'type': 'keyword', 'ignore_above': 256}}},                                                           
                                       'country': {'type': 'text', 
                                                   'fields': {'keyword': {'type': 'keyword', 'ignore_above': 256}}},    
                                       'latitude': {'type': 'float',
                                                    "null_value":  "null"}, 
                                       'longitude': {'type': 'float',
                                                     "null_value":  "null"}, 
                                       'name': {'type': 'text', 
                                                'fields': {'keyword': {'type': 'keyword', 'ignore_above': 256}}},    
                                       'postalCode': {'type': 'text',
                                                      "null_value":  "null"}, 
                                                      'fields': {'keyword': {'type': 'keyword', 'ignore_above': 256}}},    
                                       'province': {'type': 'text', 
                                                    'fields': {'keyword': {'type': 'keyword', 'ignore_above': 256}}}, 
                                       'reviews': 
                                               {'properties': {
                                                               'date': {'type': 'date', 
                                                                        "null_value":  "null"}, 
                                                               'dateAdded': {'type': 'date'}, 
                                                               'doRecommend': {'type': 'float', 
                                                                               "null_value":  "null"}, 
                                                               'id': {'type': 'float', 
                                                                      "null_value":  "null"},  
                                                               'rating': {'type': 'float', 
                                                                          "null_value":  "null"}, 
                                                               'text': {'type': 'text', 
                                                                        "null_value":  "null", 
                                                                        'fields': {'keyword': {'type': 'keyword', 'ignore_above': 256}}}, 
                                                               'title': {'type': 'text', 
                                                                         "null_value":  "null",  
                                                                         'fields': {'keyword': {'type': 'keyword', 'ignore_above': 256}}}, 
                                                               'userCity': {'type': 'text', 
                                                                            "null_value":  "null", 
                                                                            'fields': {'keyword': {'type': 'keyword', 'ignore_above': 256}}}, 
                                                               'userProvince': {'type': 'text', 
                                                                                "null_value":  "null", 
                                                                                'fields': {'keyword': {'type': 'keyword', 'ignore_above': 256}}}, 
                                                               'username': {'type': 'text', 
                                                                            "null_value":  "null", 
                                                                            'fields': {'keyword': {'type': 'keyword', 'ignore_above': 256}}}
                                               }}}}}


# mappings['settings']={'properties': {'number_of_replicas': {'type': 'long'},'number_of_shards': {'type': 'long'}}}


# i made number_of_replicas=0 due to my PC limitation
def create_index(es):
    """Creates an index in Elasticsearch if one isn't already there."""
        
    # # ignore 400 cause by IndexAlreadyExistsException when creating an index
    es.indices.create(index="hotels-index",                      
                      settings={"number_of_shards":1, "number_of_replicas":0}, 
                      ignore=400
                     )

    es.indices.put_mapping(index="hotels-index", meta= {"description": "hotels dataset"})  


if not es.indices.exists(index="hotels-index"):
    create_index(es)    

def action():
    for htl in gendata:
        for htl_name, htl_data in htl.items():        
            yield {'_index': "hotels-index",
                   '_id': htl_name,
                   '_op_type': 'index',
                   'doc': htl_data,
                   'doc_type': "hotels",
                   'mappings': mapping
                  } 
        

        
bulk(client=es, index="hotels-index", actions=action())